
pip install -e git+https://github.com/django-tastypie/django-tastypie#egg=TastyPie

-------------------------------------------------------------------------------------------------

//Create a new branch api_signals 

//Go to the settings.py file and make the changes given below

'tastypie',                                                //Add this to the INSTALLED_APPS section of the settings.py file

-----------------------------------------------------------------------------------------------------

#This is how the project urls.py would now look like. Make sure this is not the url.py file that you used in the bookstore app

from django.conf.urls import include,url
from django.contrib import admin
from django.conf import settings
from django.conf.urls.static import static
from tastypie.api import Api
from store.api import ReviewResource

v1_api= Api(api_name='v1')
v1_api.register(ReviewResource())

urlpatterns = [
   # Examples:
   # url (r'^$', 'bookstore.views.home', name='home'),
   # url (r'^blog/', include('blog.urls')),
   
   url(r'^store/', include('store.urls'), name='store'),
   url(r'^accounts/', include('registration.beckends.default.urls')),
   url('', include('social.apps.django_app.urls', namespace='social')),
   url(r'^admin/', include('admin.site.urls)),
   url(r'^api/', include(v1_api.urls)),   
] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)

----------------------------------------------------------------------------------------------------------

//Add a new Python File to the store directory and call it api.py

from tastypie.resources import ModelResource, ALL, ALL_WITH_RELATIONS
from tastypie.authentication import SessionAuthentication
from tastypie import fields
from .models import Review,Book
from django.contrib.auth.models import User

class UserResource(ModelResource):
	class Meta:
		queryset= User.objcts.all()
		fields= ["username"]

class BookResource(ModelResource):
	class Meta:
		queryset= Book.objects.all()
		allowed_methods= ['get']
		authentication= SessionAuthentication()

class ReviewResource(ModelResource):
	book= fields.ToOneField(BookResource, 'book')
	user= fields.ToOneField(UserResource, 'user', full=True)
	
	class Meta: 
		queryset= Review.objects.all()
		allowed_methods= ['get']
		authentication= SessionAuthentication()
		filtering= {
			'book' : ALL_WITH_RELATIONS
		}

-------------------------------------------------------------------------------------------------------------

./manage.py showmigrations

./manage.py migrate

./manage.py runserver

----------------------------------------------------------------------------------------------------------------


#This is how the details.html file would now look like

{% extends 'base.html' %}

(% load staticfiles %}

(% block body %}
<div class="col-md-8 col-md-offset-2 col-sm-12 maincontent">
   <div class="detail_book_display">
      <img class="detail_book_img" src="{{ MEDIA_URL }}{{ book.cover_image }}">
	  <span class="detail_book_title">{{ book.title }}</span>
	  <span class="detail_book_author">{{ book.author }}</span>
	  <div class="detail_book_description">{{ book.description }}</div>
	  <div class="detail_book_reviews_title">Reviews {% if reviews %}({{ reviews.count }}){% endif %}</div>
	  <div class="detail_book_reviews">
	      <div class="col-md-6 col-md-offset-3" style="margin-left:auto; margin-right:auto">
			 {% if form %}
				<h4> Have you read this book? Post a review!</h4>
				<form class="form-inline" action="{% url 'book_details' book.pk %}" method="POST">
					{% csrf_token %}
					{{ form.as_p }}
					<imput type="submit" value="Submit">
				</form>
				<h4 style="margin-top:20px;">You Are Reviewing Form:</h4>
			 {% endif %}
				 <div id="map-canvas" class="detail_book_reviews_map"></div>
				 <script>
				 var map;
				 var marker;
				 function initialize() {
					map= new google.maps.Map[document.getElementById('map-canvas'), {
						zoom=8,
						center: {lat: {{ geo_info.latitude }}, lng: {{ geo_info.longitude }}}
					}];
					$.getJSON('/api/v1/review/?&book_id={{ book.id }}', function(data) {
						$.each(reviews, function(i, val) {
						var review = val;
						var center = new google.maps.latlng(review.latitude, review.longitude);
						var title= review.name;
						marker= new google.maps.Marker({
							map: map,
							position: center,
							title: review.user.username
						 });
						});
					});
				}
				google.maps.event.addDomListener(window, 'load', initialize);
				</script>
			{% for review in reviews %}
				<div>
					{{ review.text }}
				</div>
			<div style="font-weight: bold">
				-{{ review.user.username }} on {{ review.publish_date }}
			</div>
			{% empty %}
				<div style="margin-top: 20px">
					There are no reviews for this book yet!
				</div>
			{% endfor %}	
		  </div>
	  </div>
   </div>
</div>
{% endblock %}

-----------------------------------------------------------------------------------------------------------------

	
